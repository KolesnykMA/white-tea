generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "referentialActions"]
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String      @id
  name              String
  email             String      @unique
  usersCount        Int         @default(1)
  usersLimit        Int         @default(5)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  users             User[]
  projects          Project[]
}

model Project {
  id                String      @id
  name              String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  account           Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId         String

  features          Feature[]
  tasks             Task[]

  @@unique([accountId, name])
}

model User {
  id                String      @id
  email             String      @unique
  passwordHash      String
  firstName         String
  lastName          String
  role              UserRole
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  account           Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId         String

  createdTasks      Task[]      @relation("creator")
  tasksToExecute    Task[]      @relation("executive")
  comments          Comment[]
}
enum UserRole {
  owner
  worker
}

model Feature {
  id                String      @id
  name              String
  startDate         DateTime
  dueDate           DateTime
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  project           Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String

  tasks             Task[]

   @@unique([projectId, name])
}

model Task {
  id                String      @id
  title             String
  status            TaskStatus  @default(todo)
  contentUrl        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  project           Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String

  feature           Feature?    @relation(fields: [featureId], references: [id])
  featureId         String?

  release           Release?    @relation(fields: [releaseId], references: [id])
  releaseId         String?

  creator           User        @relation("creator", fields: [creatorId], references: [id])
  creatorId         String

  executive         User?       @relation("executive", fields: [executiveId], references: [id])
  executiveId       String?
}
enum TaskStatus {
  todo
  inProgress
  done
}

model Comment {
  id                String      @id
  text              String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  user              User        @relation(fields: [comentatorId], references: [id])
  comentatorId      String
}

model Release {
  id                String      @id
  name              String
  description       String?
  releaseDate       DateTime
  releasedAt        DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  tasks Task[]
}
