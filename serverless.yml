service: backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${env:ENVIRONMENT}
  region: us-east-1
  environment:
    JWT_SECRET: ${ssm:auth-jwt-secret}
    DATABASE_URL: ${ssm:mysql-db-url}

plugins:
  - serverless-webpack
  - serverless-webpack-prisma

custom:
  webpack:
    includeModules: true

functions:
  authorize:
    handler: dist/src/auth/authorize/handler.handler
    name: ${self:provider.stage}-${self:service}-authorize
    tags:
      name: authorize
    timeout: 10
    memorySize: 128

  login:
    handler: dist/src/auth/login/handler.handler
    name: ${self:provider.stage}-${self:service}-login
    tags:
      name: login
    timeout: 10
    memorySize: 128

  createAccount:
    handler: dist/src/accounts/create-account/handler.handler
    name: ${self:provider.stage}-${self:service}-createAccount
    tags:
      name: createAccount
    timeout: 15
    memorySize: 128
    events:
      - http:
          path: /accounts
          method: post

  createUser:
    handler: dist/src/users/create-user/handler.handler
    name: ${self:provider.stage}-${self:service}-createUser
    tags:
      name: createUser
    timeout: 15
    memorySize: 128
    events:
      - http:
          path: /users
          method: post
          authorizer:
            name: authorize
            identitySource: method.request.header.Authorization
            type: token

  getUsers:
    handler: dist/src/users/get-users/handler.handler
    name: ${self:provider.stage}-${self:service}-getUsers
    tags:
      name: getUsers
    timeout: 10
    memorySize: 128
    events:
      - http:
          path: /users
          method: get
          authorizer:
            name: authorize
            identitySource: method.request.header.Authorization
            type: token

  createProject:
    handler: dist/src/projects/create-project/handler.handler
    name: ${self:provider.stage}-${self:service}-createProject
    tags:
      name: createProject
    timeout: 15
    memorySize: 128
    events:
      - http:
          path: /projects
          method: post
          authorizer:
            name: authorize
            identitySource: method.request.header.Authorization
            type: token

  getProjects:
    handler: dist/src/projects/get-projects/handler.handler
    name: ${self:provider.stage}-${self:service}-getProjects
    tags:
      name: getProjects
    timeout: 10
    memorySize: 128
    events:
      - http:
          path: /projects
          method: get
          authorizer:
            name: authorize
            identitySource: method.request.header.Authorization
            type: token

  getProject:
    handler: dist/src/projects/get-project/handler.handler
    name: ${self:provider.stage}-${self:service}-getProject
    tags:
      name: getProject
    timeout: 10
    memorySize: 128
    events:
      - http:
          path: /projects/{projectId}
          method: get
          request:
            parameters:
              paths:
                projectId: true
          authorizer:
            name: authorize
            identitySource: method.request.header.Authorization
            type: token

  createTask:
    handler: dist/src/tasks/create-task/handler.handler
    name: ${self:provider.stage}-${self:service}-createTask
    tags:
      name: createTask
    timeout: 15
    memorySize: 128
    events:
      - http:
          path: /tasks
          method: post
          authorizer:
            name: authorize
            identitySource: method.request.header.Authorization
            type: token
